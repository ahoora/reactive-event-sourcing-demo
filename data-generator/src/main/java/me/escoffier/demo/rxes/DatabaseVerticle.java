package me.escoffier.demo.rxes;

import com.mysql.cj.jdbc.Driver;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.core.AbstractVerticle;
import io.vertx.reactivex.core.eventbus.Message;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

import java.sql.Timestamp;
import java.time.Instant;

/**
 * @author <a href="http://escoffier.me">Clement Escoffier</a>
 */
public class DatabaseVerticle extends AbstractVerticle {

    private JDBCClient jdbc;
    private static final String INSERT = "INSERT INTO measures (user, timestamp, temperature, systolic, diastolic, glucose) VALUES (?, ?, ?, ?, ?, ?)";

    @Override
    public void start() {
        jdbc = JDBCClient.createShared(vertx,
            new JsonObject().put("url", "jdbc:mysql://mysql:3306/measures")
                .put("driver_class", Driver.class.getName())
                .put("user", System.getenv("MYSQL_USER"))
                .put("password", System.getenv("MYSQL_PASSWORD"))
                .put("useSSL", false)
        );

        vertx.eventBus().<JsonObject>consumer("measures").toFlowable()
            .map(Message::body)
            .flatMapCompletable(
                json -> connect()
                    .flatMapCompletable(
                        connection -> insert(json, connection)
                            .doOnTerminate(connection::close)))
            .subscribe();
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
            .map(c -> c.setOptions(
                new SQLOptions().setAutoGeneratedKeys(true)));
    }

    private Completable insert(JsonObject data, SQLConnection connection) {
        JsonArray params = new JsonArray();
        params.add(data.getString("name"))
            .add(Instant.ofEpochMilli(data.getLong("timestamp")))
            .add(data.getJsonObject("temperature").getDouble("value"))
            .add(data.getJsonObject("pressure").getDouble("systolic"))
            .add(data.getJsonObject("pressure").getDouble("diastolic"))
            .add(data.getJsonObject("glucose").getDouble("value"));
        return connection
            .rxUpdateWithParams(INSERT, params)
            .doOnSuccess(ur -> System.out.println("Data written: " + data.encode()))
            .toCompletable();
    }


}
